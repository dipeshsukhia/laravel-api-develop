<?php

namespace App\Exceptions\Traits;

use Illuminate\Auth\AuthenticationException;
use Illuminate\Http\Exceptions\HttpResponseException;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Response;
use Illuminate\Validation\ValidationException;
use Throwable;

trait ApiHandlerTrait
{
    /**
     * @param $request
     * @param ValidationException $exception
     * @return JsonResponse
     */
    protected function invalidJson($request, ValidationException $exception): JsonResponse
    {
        return response()->apiJson([
            'success' => false,
            'message' => $exception->getMessage(),
            'errors' => $exception->errors()
        ], $exception->status);
    }

    /**
     * @param $request
     * @param Throwable $e
     * @return JsonResponse|Response|\Symfony\Component\HttpFoundation\Response
     * @throws Throwable
     */
    public function render($request, Throwable $e)
    {
        if ($request->wantsJson()) {
            return $this->handleApiException($request, $e);
        }
        return parent::render($request, $e);
    }

    /**
     * @param $request
     * @param Throwable $exception
     * @return JsonResponse
     * @throws Throwable
     */
    private function handleApiException($request, Throwable $exception): JsonResponse
    {
        $exception = $this->prepareException($exception);

        if ($exception instanceof HttpResponseException) {
            $exception = $exception->getResponse();
        } else if ($exception instanceof AuthenticationException) {
            $exception = $this->unauthenticated($request, $exception);
        } else if ($exception instanceof ValidationException) {
            return parent::render($request, $exception);
        }

        return $this->customApiResponse($exception);
    }

    /**
     * @param $exception
     * @return JsonResponse
     */
    private function customApiResponse($exception): JsonResponse
    {
        $statusCode = method_exists($exception, 'getStatusCode')
            ? $exception->getStatusCode()
            : Response::HTTP_INTERNAL_SERVER_ERROR;
        $response = [];
        if (config('app.debug')) {
            $response['trace'] = method_exists($exception, 'getTrace')
                ? $exception->getTrace()
                : null;
            $response['code'] = method_exists($exception, 'code')
                ? $exception->code()
                : null;
            $message = method_exists($exception, 'getMessage')
                ? $exception->getMessage()
                : null;
            $errors = method_exists($exception, 'getErrors')
                ? $exception->errors()
                : null;
        }
        return response()->apiJson([
            'success' => false,
            'message' => $message ?? Response::$statusTexts[$statusCode],
            'errors' => $errors ?? Response::$statusTexts[$statusCode],
            'meta' => $response
        ], $statusCode);
    }
}
